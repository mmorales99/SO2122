BACI System: C-- to PCODE Compiler, 10/03/2010
Source file: C:\programming\jbaci_raveh.gonen\examples\tree-planting\ok.cm  Thu Mar 25 21:06:32 2010
 line  pc
   1    0  #include "../gdefs.cm"
>   1    0  // Constants for jBACI graphcs
>   2    0  const
>   3    0     int RED   = 1; int BLACK   = 2; int BLUE  = 3; int YELLOW = 4;
>   4    0     int GREEN = 5; int MAGENTA = 6; int WHITE = 7;
>   5    0     
>   6    0     int CIRCLE         = 1; 
>   7    0     int LINE           = 2; 
>   8    0     int RECTANGLE      = 3; 
>   9    0     int TRIANGLE       = 4; 
>  10    0     int ANIMAGE        = 5;
>  11    0     int RNDRECT 		  = 6;
>  12    0     int LINE_CIRCLE    = 21; 
>  13    0     int LINE_RECTANGLE = 22; 
>  14    0     int LINE_TRIANGLE  = 23; 
>  15    0     int LINE_RNDRECT   = 24;
>  16    0     int NUMBER_BOX     = 25;
>  17    0     
>  18    0  
Returning to file C:\programming\jbaci_raveh.gonen\examples\tree-planting\ok.cm
   2    0  const int GRASS_ICON     =10;
   3    0  const int FIRST_HOLE_ICON=20;
   4    0  const int DIG_ICON       =100; 
   5    0  const int PLANT_ICON     =101; 
   6    0  const int COVER_ICON     =102;
   7    0  
   8    0  semaphore s_plant = 0;
   9    0  semaphore s_dig = 0;
  10    0  binarysem s=1;
  11    0  
  12    0  const int SZ=64;
  13    0  const int max_holes = 12;
  14    0  int to_dig   = 0;
  15    0  int to_plant = 0;
  16    0  int to_cover = 0;
  17    0  
  18    0  int holes_y;
  19    0  int dig_y;
  20    0  int plant_y;
  21    0  int cover_y;
  22    0  int dx = SZ;
  23    0  int x[3];
  24    0  
  25    0  void dig() {	
  26    0  	int on_hole;
  27    0  	while (to_dig>0) {
  28    4  		wait(s); // Critical Section
  29    6  		--to_dig;
  30   11  		++to_plant;
  31   16  		moveby(DIG_ICON, dx, 0);		
  32   20  		on_hole=(x[0]-dx)/dx;
  33   30  		changecolor(FIRST_HOLE_ICON+on_hole, BLUE); // Turn Hole To Status: Digged
  34   35  		x[0]=x[0]+dx;
  35   45  		cout << "finished digging\n";
  36   46  		signal(s);
  37   48  		signal(s_dig);
  38   50  	}
  39   51  }
  40   52  
  41   52  void plant() {
  42   52  	int on_hole;
  43   52  	while ((to_dig>0) || (to_plant>0)) {
  44   60                  wait(s_dig);
  45   62  		wait(s); // Critical Section
  46   64  		--to_plant;
  47   69  		++to_cover;
  48   74  		moveby(PLANT_ICON, dx, 0);
  49   78  		on_hole=(x[1]-dx)/dx;
  50   88  		changecolor(FIRST_HOLE_ICON+on_hole, MAGENTA); // Turn Hole To Status: Planted
  51   93  		x[1]=x[1]+dx;
  52  103  		cout << "finished planting\n";
  53  104  		signal(s);
  54  106  		signal(s_plant);
  55  108  	}
  56  109  }
  57  110  
  58  110  void cover() {
  59  110  	int on_hole;
  60  110  	while ((to_dig>0) || (to_plant>0) || (to_cover>0)) {
  61  122  		wait(s_plant);
  62  124  		wait(s); // Critical Section
  63  126  		--to_cover;
  64  131  		moveby(COVER_ICON, dx, 0);
  65  135  		on_hole=(x[2]-dx)/dx;
  66  145  		changecolor(FIRST_HOLE_ICON+on_hole, GREEN); // Turn Hole To Status: Covered
  67  150  		x[2]=x[2]+dx;
  68  160  		cout << "finished covering\n";
  69  161  		signal(s);
  70  163  	}
  71  164  }
  72  165  
  73  165  void main() {
  74  166  	int i=0;
  75  169  	holes_y = 64*4;
  76  174  	for (i=0; i<3; ++i) x[i]=dx;
  77  194  	to_dig = max_holes;
  78  197  	dig_y = 64*4-SZ;
  79  204  	plant_y = dig_y-SZ;
  80  209  	cover_y = plant_y-SZ;
  81  214  	create(GRASS_ICON, ANIMAGE, 0, dx+dx-15, dx-10, -1, -1);
  82  230  	for (i=0; i<to_dig; ++i) 
  83  244  		create(FIRST_HOLE_ICON+i, CIRCLE, BLACK, dx+(i+1)*dx, holes_y, SZ, SZ);
  84  261  	create(DIG_ICON,   ANIMAGE, 0, dx, dig_y, -1, -1);
  85  271  	create(PLANT_ICON, ANIMAGE, 0, dx, plant_y, -1, -1);
  86  281  	create(COVER_ICON, ANIMAGE, 0, dx, cover_y, -1, -1);
  87  291  	cobegin {
  88  292  		dig();
  89  295  		plant();
  90  298  		cover();		
  91  301  	}
  92  302  }
